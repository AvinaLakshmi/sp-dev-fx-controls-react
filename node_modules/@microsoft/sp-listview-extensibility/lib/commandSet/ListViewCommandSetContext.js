"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var sp_extension_base_1 = require("@microsoft/sp-extension-base");
var ListViewCommandSetContext = (function (_super) {
    __extends(ListViewCommandSetContext, _super);
    function ListViewCommandSetContext(extensionContextParameters, listViewCommandSetContextParameters) {
        var _this = _super.call(this, extensionContextParameters) || this;
        _this._listView = listViewCommandSetContextParameters.listView;
        _this._commandArray = [];
        var itemsMap = _this.manifest.items;
        for (var _i = 0, _a = Object.keys(itemsMap); _i < _a.length; _i++) {
            var itemId = _a[_i];
            if (itemsMap[itemId].type === 'command') {
                _this._commandArray.push({
                    id: itemId,
                    title: itemsMap[itemId].title.default || '',
                    ariaLabel: itemsMap[itemId].ariaLabel ?
                        itemsMap[itemId].ariaLabel.default : undefined,
                    iconImageUrl: itemsMap[itemId].iconImageUrl,
                    visible: true
                });
            }
        }
        return _this;
    }
    Object.defineProperty(ListViewCommandSetContext.prototype, "listView", {
        get: function () {
            return this._listView;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListViewCommandSetContext.prototype, "_commands", {
        get: function () {
            return this._commandArray;
        },
        enumerable: true,
        configurable: true
    });
    return ListViewCommandSetContext;
}(sp_extension_base_1.ExtensionContext));
exports.default = ListViewCommandSetContext;
